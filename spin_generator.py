import streamlit as st
import random
import re
import pandas as pd
import csv
import io

def fix_encoding(text):
    """Corrige l'encodage des caract√®res et formate les nombres."""
    if not isinstance(text, str):
        text = str(text)
    
    # Si le texte est un nombre avec d√©cimale .0, le convertir en entier
    try:
        # V√©rifie si c'est un nombre avec d√©cimale
        if '.' in text:
            number = float(text)
            # Si c'est un nombre entier (ex: 123.0), enlever la d√©cimale
            if number.is_integer():
                return str(int(number))
        # Si c'est un nombre sans d√©cimale, le retourner tel quel
        if text.isdigit():
            return text
    except ValueError:
        # Si ce n'est pas un nombre, continuer avec le traitement normal
        pass
    
    # Dictionnaire de conversion pour les caract√®res mal encod√©s
    fixes = {
        '√É¬®': '√®',
        '√É¬©': '√©',
        '√É': '√†',
        '√É¬¥': '√¥',
        '√É¬Æ': '√Æ',
        '√É¬Ø': '√Ø',
        '√É¬¢': '√¢',
        '√É¬ª': '√ª',
        '√É¬π': '√π',
        '√É¬ß': '√ß',
        '√â': '√â',
        '√®': '√®',
        '√©': '√©',
        '√†': '√†',
        '√π': '√π',
        '√¢': '√¢',
        '√™': '√™',
        '√Æ': '√Æ',
        '√Ø': '√Ø',
        '√ß': '√ß',
        '√ª': '√ª',
        '√¥': '√¥',
        '√∂': '√∂',
        '√º': '√º'
    }
    
    # Application des corrections
    for wrong, right in fixes.items():
        text = text.replace(wrong, right)
    
    return text

def validate_and_convert_csv(uploaded_file):
    """V√©rifie et convertit le fichier CSV."""
    try:
        # Premier essai en UTF-8
        try:
            df = pd.read_csv(uploaded_file, sep=';', encoding='utf-8')
        except UnicodeDecodeError:
            # Si UTF-8 √©choue, on essaie en latin1
            uploaded_file.seek(0)
            df = pd.read_csv(uploaded_file, sep=';', encoding='latin1')
        
        # Conversion des colonnes en string et nettoyage
        for col in df.columns:
            df[col] = df[col].astype(str).apply(fix_encoding)
        
        # Correction de l'encodage des noms de colonnes
        df.columns = [fix_encoding(col) for col in df.columns]
        
        st.success(f"CSV charg√© avec succ√®s : {len(df)} lignes, {len(df.columns)} colonnes")
        return df
        
    except Exception as e:
        st.error(f"Erreur lors de la lecture du CSV : {str(e)}")
        return None

def generate_variation(text, variables):
    """G√©n√®re une variation du texte."""
    result = text
    for var_name, var_value in variables.items():
        result = result.replace(f"{{{var_name}}}", str(var_value))
    
    def replace_spin(match):
        options = match.group(1).split('|')
        return random.choice(options)
    
    result = re.sub(r'\[(.*?)\]', replace_spin, result)
    return result

def generate_csv_download(variations_data):
    """G√©n√®re le fichier CSV de sortie."""
    output = io.StringIO()
    writer = csv.writer(output)
    
    if variations_data and len(variations_data) > 0:
        headers = list(variations_data[0]['variables'].keys()) + ['Texte g√©n√©r√©']
        writer.writerow(headers)
        for row in variations_data:
            writer.writerow(
                [row['variables'][col] for col in row['variables'].keys()] + 
                [row['text']]
            )
    return output.getvalue()

# Configuration de la page
st.set_page_config(page_title="G√©n√©rateur de Spin", page_icon="üîÑ", layout="wide")

# Titre principal
st.title("üîÑ G√©n√©rateur de Spin par CSV")

# Upload CSV
st.subheader("1. Chargez votre fichier CSV")
uploaded_file = st.file_uploader("Choisissez un fichier CSV (s√©parateur : point-virgule)", type="csv")

if uploaded_file is not None:
    # Validation et conversion du CSV
    df = validate_and_convert_csv(uploaded_file)
    
    if df is not None:
        # Aper√ßu des donn√©es
        st.subheader("Aper√ßu des donn√©es")
        st.dataframe(df)
        
        # S√©lection des colonnes
        selected_columns = st.multiselect(
            "S√©lectionnez les colonnes √† utiliser comme variables",
            df.columns.tolist(),
            default=df.columns.tolist()
        )
        
        # Zone de texte pour le spin
        st.subheader("2. Entrez votre Master Spin")
        spin_help = "Variables disponibles : " + ", ".join([f"{{{col}}}" for col in selected_columns])
        spin_text = st.text_area(
            "Texte avec spins",
            help=spin_help,
            height=200,
            placeholder="Exemple : Le d√©partement {D√©partement} compte {Nombre de villes} [villes|communes] pour une population de {Population totale} habitants."
        )
        
        # G√©n√©ration des variations
        if st.button("üîÑ G√©n√©rer les variations"):
            if spin_text:
                variations_data = []
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                for index, row in df.iterrows():
                    progress = (index + 1) / len(df)
                    progress_bar.progress(progress)
                    status_text.text(f"Traitement de la ligne {index + 1}/{len(df)}")
                    
                    variables = {col: str(row[col]) for col in selected_columns}
                    variation = generate_variation(spin_text, variables)
                    variations_data.append({
                        'variables': variables,
                        'text': variation
                    })
                
                progress_bar.empty()
                status_text.empty()
                
                # Affichage des variations
                st.subheader(f"Variations g√©n√©r√©es ({len(variations_data)})")
                preview_limit = st.slider(
                    "Nombre de pr√©visualisations",
                    min_value=1,
                    max_value=min(len(variations_data), 50),
                    value=min(10, len(variations_data))
                )
                
                for i, var_data in enumerate(variations_data[:preview_limit], 1):
                    with st.expander(f"Variation {i}", expanded=i==1):
                        st.text_area(
                            "Variables utilis√©es",
                            value="\n".join([f"{k} = {v}" for k,v in var_data['variables'].items()]),
                            height=100
                        )
                        st.text_area(
                            "Texte g√©n√©r√©",
                            value=var_data['text'],
                            height=100
                        )
                
                # Export CSV
                csv_data = generate_csv_download(variations_data)
                st.download_button(
                    label=f"üì• T√©l√©charger les {len(variations_data)} variations (CSV)",
                    data=csv_data,
                    file_name="variations_completes.csv",
                    mime="text/csv"
                )
            else:
                st.warning("Veuillez entrer un texte avec des spins")

# Guide d'utilisation
with st.sidebar:
    st.header("üìñ Guide d'utilisation")
    st.markdown("""
    ### Format du CSV
    - S√©parateur : point-virgule (;)
    - Encodage : UTF-8 ou Latin1
    - En-t√™tes obligatoires
    
    ### Utilisation
    1. **Chargez votre CSV**
       - Le fichier sera automatiquement valid√©
       - Les caract√®res sp√©ciaux seront corrig√©s
    
    2. **S√©lectionnez vos colonnes**
       - Choisissez les variables √† utiliser
       - Format : {nom_colonne}
    
    3. **√âcrivez votre Master Spin**
       - [option1|option2] pour les variations
       - {variable} pour les donn√©es
    
    4. **G√©n√©rez et exportez**
       - Pr√©visualisez les r√©sultats
       - Exportez en CSV
    """)